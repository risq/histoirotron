//
// G_Responder
// Get info needed to make ticcmd_ts for the players.
//
boolean G_Responder (event_t* ev)
{
    // allow spy mode changes even during the demo
    if (gamestate == GS_LEVEL && ev->type == ev_keydown
	&& ev->data1 == KEY_F12 && (singledemo || !deathmatch) )
    {
	// spy mode
	do
	{
	    displayplayer++;
	    if (displayplayer == MAXPLAYERS)
		displayplayer = 0;
	} while (!playeringame[displayplayer] && displayplayer != consoleplayer);
	return true;
    }

    // any other key pops up menu if in demos
    if (gameaction == ga_nothing && !singledemo &&
	(demoplayback || gamestate == GS_DEMOSCREEN)
	)
    {
	if (ev->type == ev_keydown ||
	    (ev->type == ev_mouse && ev->data1) ||
	    (ev->type == ev_joystick && ev->data1) )
	{
	    M_StartControlPanel ();
	    return true;
	}
	return false;
    }

    if (gamestate == GS_LEVEL)
    {
#if 0
	if (devparm && ev->type == ev_keydown && ev->data1 == ';')
	{
	    G_DeathMatchSpawnPlayer (0);
	    return true;
	}
#endif
	if (HU_Responder (ev))
	    return true;	// chat ate the event
	if (ST_Responder (ev))
	    return true;	// status window ate it
	if (AM_Responder (ev))
	    return true;	// automap ate it
    }

    if (gamestate == GS_FINALE)
    {
	if (F_Responder (ev))
	    return true;	// finale ate the event
    }

    switch (ev->type)
    {
      case ev_keydown:
	if (ev->data1 == KEY_PAUSE)
	{
	    sendpause = true;
	    return true;
	}
	if (ev->data1 <NUMKEYS)
	    gamekeydown[ev->data1] = true;
	return true;    // eat key down events

      case ev_keyup:
	if (ev->data1 <NUMKEYS)
	    gamekeydown[ev->data1] = false;
	return false;   // always let key up events filter down

      case ev_mouse:
	mousebuttons[0] = ev->data1 & 1;
	mousebuttons[1] = ev->data1 & 2;
	mousebuttons[2] = ev->data1 & 4;
	mousex = ev->data2*(mouseSensitivity+5)/10;
	mousey = ev->data3*(mouseSensitivity+5)/10;
	return true;    // eat events

      case ev_joystick:
	joybuttons[0] = ev->data1 & 1;
	joybuttons[1] = ev->data1 & 2;
	joybuttons[2] = ev->data1 & 4;
	joybuttons[3] = ev->data1 & 8;
	joyxmove = ev->data2;
	joyymove = ev->data3;
	return true;    // eat events

      default:
	break;
    }

    return false;
}



//
// G_Ticker
// Make ticcmd_ts for the players.
//
void G_Ticker (void)
{
    int		i;
    int		buf;
    ticcmd_t*	cmd;
